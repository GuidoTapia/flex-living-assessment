// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Property {
  id          String    @id @default(cuid())
  slug        String    @unique
  name        String
  address     String?
  city        String?
  country     String?
  ratingAvg   Float     @default(0)
  price       Float?    // Price per night
  bedrooms    Int?      // Number of bedrooms
  bathrooms   Int?      // Number of bathrooms
  guests      Int?      // Maximum number of guests
  image       String?   // Property image URL
  reviews     Review[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}



model Listing {
  id         String   @id @default(cuid())
  externalId String   @unique                 // Hostaway listingId or slug of listingName
  name       String
  channel    String?                          // e.g., airbnb | booking | direct | unknown

  reviews    Review[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Category {
  id      String   @id @default(cuid())
  name    String   @unique  // e.g., "Cleanliness", "Location", "Staff", "Noise"
  reviews Review[] @relation("ReviewCategories")
}

model Review {
  id           String   @id @default(cuid())

  source       String                      // 'hostaway' | 'google'
  externalId   String                      // e.g., Hostaway review id

  listingId    String
  listing      Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)

  propertyId   String?
  property     Property? @relation(fields: [propertyId], references: [id], onDelete: SetNull)

  reviewType   String                      // 'host_to_guest' | 'guest_to_host' | 'public' | ...
  channel      String                      // 'airbnb' | 'booking' | 'direct' | 'google' | 'unknown'
  rating       Float
  title        String?
  body         String
  authorName   String?
  language     String?
  categories   Category[] @relation("ReviewCategories")

  // Timestamps & publishing
  createdAt    DateTime                    // from submittedAt (UTC)
  updatedAt    DateTime @updatedAt
  approved     Boolean  @default(false)    // manager approval toggle

  @@unique([externalId, source], name: "externalId_source")
  @@index([listingId, createdAt])
  @@index([source, createdAt])
  @@index([propertyId, createdAt])
}